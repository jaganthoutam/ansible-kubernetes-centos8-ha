- name: Create a policies folder
  file:
    path: "/etc/kubernetes/policies"
    owner: "root"
    group: "root"
    state: directory

- name: Copy audit policy yaml to directory
  copy:
    src: "../files/audit-policy.yaml"
    dest: "/etc/kubernetes/policies/audit-policy.yaml" 
    mode: 0644

- name: "Checker for kube-apiserver configuration"
  shell: "cat {{ kubeapiserver_config }}"
  register: presence_apiserver

- name: "Checker for policies volumes"
  shell: "grep -Fx \"    name: policies\" {{ kubeapiserver_config }} | wc -l"
  register: presence_apiserver_volume

- name: "Checker for policies volumes mount"
  shell: "grep -Fx \"    - mountPath: /etc/kubernetes/policies\" {{ kubeapiserver_config }} | wc -l"
  register: presence_apiserver_mount

- name: Add volumes of policies
  blockinfile:
    dest: "{{ kubeapiserver_config }}"
    block: "{{ lookup('template', 'policies-volume.j2') }}"
    marker: "## {mark} ANSIBLE MANAGED BLOCK FOR POLICIES VOLUME"
    insertafter: '  volumes:'
  when: presence_apiserver_volume.stdout=="0"

- name: Add volumes mounts of policies
  blockinfile:
    dest: "{{ kubeapiserver_config }}"
    block: "{{ lookup('template', 'policies-volume-mounts.j2') }}"
    marker: "## {mark} ANSIBLE MANAGED BLOCK FOR POLICIES VOLUME MOUNT"
    insertafter: '    volumeMounts:'
  when: presence_apiserver_mount.stdout=="0"

- name: |
         "3.2.1 Ensure that a minimal audit policy is created (Scored)"
         "3.2.2 Ensure that the audit policy covers key security concerns (Not Scored)"
  lineinfile:
    path: "{{ kubeapiserver_config }}"
    insertafter: '- kube-apiserver'
    line: '    - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml'
  when: presence_apiserver.stdout is not search('audit-policy-file')

- name: |
         "Audit: 3.2.1 Ensure that a minimal audit policy is created (Scored) - Type is Manual"
         "Audit: 3.2.2 Ensure that the audit policy covers key security concerns (Not Scored) - Type is Manual"
  shell: "ps -ef | grep kube-apiserver | grep audit-policy-file"
  register: audit_check

- debug: msg="audit-policy-file exists"
  when: audit_check.stdout.find('audit-policy-file') != -1
  
