---
- stat:
    path: "{{ config_file }}"
  register: st

- name: "2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)"
  shell: grep '"icc"' "{{ config_file }}" | wc -l
  ignore_errors: yes
  register: result
  when: st.stat.exists == True
  
- shell: grep '"icc"' "{{ config_file }}" | grep false | wc -l
  ignore_errors: yes
  register: result_false
  when: st.stat.exists == True and result.stdout != '0'    

- shell: sed -i '/^$/d' "{{ config_file }}"; sed -i '$d' "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|icc|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout == '0'
  
- shell: MATCH_LINE=`grep -n '"icc"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/true/false/g' "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout == '0'
  
- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|icc|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == False  

- debug: msg="Network traffic is restricted between containers on the default bridge. icc set to false"
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout != '0'  
  tags:
   - scored
   - section2.1

#- name: "2.2 Ensure the logging level is set to 'info' (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: log-level
#    value: info
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.2
#
#- name: "2.3 Ensure Docker is allowed to make changes to iptables (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: iptables
#    value: true
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.3
#
#- name: "2.4 Ensure insecure registries are not used (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: insecure-registries
#    state: absent
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.4
#
#- name: "2.5 Ensure aufs storage driver is not used (Scored)"
#  debug:
#    msg: "'aufs' not used as storage driver for your Docker instance."
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.5

- stat:
    path: "{{ config_file }}"
  register: st
  
- block:
    - name: Include Docker daemon configuration
      import_tasks: tls_certs.yml
      when: section_2 | bool

    - name: "2.6 Ensure TLS authentication for Docker daemon is configured (Scored)"
      jsonpatch: 
        file: "{{ config_file }}"
        key: tlsverify
        value: true
      notify: Reload docker

    - name: "2.6 Ensure TLS authentication for Docker daemon is configured (Scored)"
      jsonpatch: 
        file: "{{ config_file }}"
        key: tlscacert
        value: "{{ server_cert_path }}/{{ ca_cert }}"
      notify: Reload docker

    - name: "2.6 Ensure TLS authentication for Docker daemon is configured (Scored)"
      jsonpatch: 
        file: "{{ config_file }}"
        key: tlscert
        value: "{{ server_cert_path }}/{{ server_cert }}"
      notify: Reload docker

    - name: "2.6 Ensure TLS authentication for Docker daemon is configured (Scored)"
      jsonpatch: 
        file: "{{ config_file }}"
        key: tlskey
        value: "{{ server_cert_path }}/{{ server_cert_key }}"
      notify: Reload docker
  when: dockerd_via_network
  tags:
   - scored
   - section2.6
   
- name: "2.7 Ensure the default ulimit is configured appropriately (Not Scored)"
  debug: msg="N/A Affects successful start up of application."
  tags:
   - not_scored
   - section2.7   

#- stat:
#    path: "{{ config_file }}"
#  register: st
#  
#- name: "2.7 Ensure the default ulimit is configured appropriately (Not Scored)"
#  shell: grep '"default-ulimits"' "{{ config_file }}" | wc -l
#  ignore_errors: yes
#  register: result
#  when: st.stat.exists == True
#  
#- shell: sed -i '/^$/d' "{{ config_file }}"; sed -i '$d' "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_ufile }}" >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout == '0'
#  
#- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_ufile }}" >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == False  
#
#- debug: msg="Default ulimit is already configured."
#  when: st.stat.exists == True and result.stdout != '0'
#  tags:
#   - not_scored
#   - section2.7
   
- name: "2.8 Enable user namespace support (Scored)"
  debug: msg="Docker won't start if this is set."
  tags:
   - scored
   - section2.8   
   
#- name: "2.8 Enable user namespace support (Scored)"
#  lineinfile:
#    path: "{{ item }}"
#    line: dockremap:231072:65536
#  with_items:
#    - /etc/subgid
#    - /etc/subuid
#  tags:
#   - scored
#   - section2.8
#
#- stat:
#    path: "{{ config_file }}"
#  register: st
#  
#- name: "2.8 Enable user namespace support (Scored)"
#  shell: grep '"userns-remap"' "{{ config_file }}" | wc -l
#  ignore_errors: yes
#  register: result
#  when: st.stat.exists == True
#  
#- shell: grep '"userns-remap"' "{{ config_file }}" | grep '"default"' | wc -l
#  ignore_errors: yes
#  register: result_default
#  when: st.stat.exists == True and result.stdout != '0'
#
#- shell: grep '"userns-remap"' "{{ config_file }}" | awk '{print $2}' | sed 's|[",]||g'
#  ignore_errors: yes
#  register: userns_value
#  when: st.stat.exists == True and result.stdout != '0' and result_default.stdout != '0'
#  
#- shell: sed -i '/^$/d' "{{ config_file }}"; sed -i '$d' "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|userns-remap|g' | sed 's|value|\"default\"|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout == '0'
#  
#- shell: MATCH_LINE=`grep -n '"userns-remap"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/{{ userns_value }}/\"default\"/g' "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout != '0' and result_default.stdout == '0'
#  
#- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|userns-remap|g' | sed 's|value|\"default\"|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == False  
#
#- debug: msg="User namespace support already enabled"
#  when: st.stat.exists == True and result.stdout != '0' and result_default.stdout != '0'  
#  tags:
#   - scored
#   - section2.8

#- name: "2.9 Ensure the default cgroup usage has been confirmed (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: cgroup-parent
#    value: /docker
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.9
#
#- name: "2.10 Ensure base device size is not changed until needed (Scored)"
#  debug:
#    msg: "base device size left at default as per guidance."
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.10

#- name: "2.11 Ensure that authorization for Docker client commands is enabled (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: authorization-plugins
#    value: "{{ authorization_plugins }}"
#  when: authorization_plugins is defined and (authorization_plugins|length>0)
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.11

- name: "2.11 Ensure that authorization for Docker client commands is enabled (Scored)"
  debug:
    msg: "Default TLS authorization set by 2.6"
  when: authorization_plugins is not defined or (authorization_plugins|length==0)
  tags:
   - scored
   - section2.11

#- name: "2.12 Ensure centralized and remote logging is configured (Scored)"
#  jsonpatch: 
#    file: "{{ config_file }}"
#    key: log-opts
#    value: { 'syslog-address': '{{ syslog_address }}' }
#  when: syslog_address is defined and syslog_address != ''
#  notify: Reload docker
#  tags:
#   - scored
#   - section2.12

#disable-legacy-registry is already removed in version v19.03.0
- stat:
    path: "{{ config_file }}"
  register: st
  
- name: "2.13 Ensure operations on legacy registry (v1) are Disabled (Scored)"
  debug: msg="disable-legacy-registry is already removed in version v19.03.0"
  tags:
   - scored
   - section2.13
   
#  shell: grep '"disable-legacy-registry"' "{{ config_file }}" | wc -l
#  ignore_errors: yes
#  register: result
#  when: st.stat.exists == True
#  
#- shell: grep '"disable-legacy-registry"' "{{ config_file }}" | grep true | wc -l
#  ignore_errors: yes
#  register: result_true
#  when: st.stat.exists == True and result.stdout != '0'    
#
#- shell: sed -i '/^$/d'  "{{ config_file }}"; sed -i '$d'  "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|disable-legacy-registry|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout == '0'
#  
#- shell: MATCH_LINE=`grep -n '"disable-legacy-registry"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/false/true/g' "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout == '0'
#  
#- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|disable-legacy-registry|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == False  
#
#- debug: msg="Operations on legacy registry (v1) are already Disabled"
#  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout != '0'  


#- stat:
#    path: "{{ config_file }}"
#  register: st

- name: "2.14 Ensure live restore is Enabled (Scored)"
  debug: msg="Docker won't start if live-restore is set to true."
  tags:
   - scored
   - section2.14
 
#- name: "2.14 Ensure live restore is Enabled (Scored)"
#  shell: grep '"live-restore"' "{{ config_file }}" | wc -l
#  ignore_errors: yes
#  register: result
#  when: st.stat.exists == True
#  
#- shell: grep '"live-restore"' "{{ config_file }}" | grep true | wc -l
#  ignore_errors: yes
#  register: result_true
#  when: st.stat.exists == True and result.stdout != '0'    
#
#- shell: sed -i '/^$/d'  "{{ config_file }}"; sed -i '$d'  "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|live-restore|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout == '0'
#  
#- shell: MATCH_LINE=`grep -n '"live-restore"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/false/true/g' "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout == '0'
#  
#- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|live-restore|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
#  notify: Reload docker
#  when: st.stat.exists == False  
#
#- debug: msg="Live restore is already Enabled"
#  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout != '0' 
#  tags:
#   - scored
#   - section2.14

- stat:
    path: "{{ config_file }}"
  register: st
  
- name: "2.15 Ensure Userland Proxy is Disabled (Scored)"
  shell: grep '"userland-proxy"' "{{ config_file }}" | wc -l
  ignore_errors: yes
  register: result
  when: st.stat.exists == True
  
- shell: grep '"userland-proxy"' "{{ config_file }}" | grep false | wc -l
  ignore_errors: yes
  register: result_false
  when: st.stat.exists == True and result.stdout != '0'    

- shell: sed -i '/^$/d' "{{ config_file }}"; sed -i '$d' "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|userland-proxy|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout == '0'
  
- shell: MATCH_LINE=`grep -n '"userland-proxy"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/true/false/g' "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout == '0'
  
- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|userland-proxy|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == False  

- debug: msg="Userland Proxy is Disabled"
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout != '0'  
  tags:
   - scored
   - section2.15

- name: "2.16 Ensure daemon-wide custom seccomp profile is applied, if needed (Not Scored)"
  jsonpatch: 
    file: "{{ config_file }}"
    key: seccomp-profile
    value: "{{ seccomp_profile }}"
  when: seccomp_profile is defined and seccomp_profile != ''
  notify: Reload docker
  tags:
   - scored
   - section2.16

- stat:
    path: "{{ config_file }}"
  register: st
  
- name: "2.17 Ensure experimental features are avoided in production (Scored)"
  shell: grep '"experimental"' "{{ config_file }}" | wc -l
  ignore_errors: yes
  register: result
  when: st.stat.exists == True
  
- shell: grep '"experimental"' "{{ config_file }}" | grep false | wc -l
  ignore_errors: yes
  register: result_false
  when: st.stat.exists == True and result.stdout != '0'    

- shell: sed -i '/^$/d'  "{{ config_file }}"; sed -i '$d'  "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|experimental|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout == '0'
  
- shell: MATCH_LINE=`grep -n '"experimental"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/true/false/g' "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout == '0'
  
- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|experimental|g' | sed 's|value|false|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == False  

- debug: msg="Experimental features are already avoided in production"
  when: st.stat.exists == True and result.stdout != '0' and result_false.stdout != '0' 
  tags:
   - scored
   - section2.17

- stat:
    path: "{{ config_file }}"
  register: st
  
- name: 2.18 Ensure containers are restricted from acquiring new privileges (Scored)
  shell: grep '"no-new-privileges"' "{{ config_file }}" | wc -l
  ignore_errors: yes
  register: result
  when: st.stat.exists == True
  
- shell: grep '"no-new-privileges"' "{{ config_file }}" | grep true | wc -l
  ignore_errors: yes
  register: result_true
  when: st.stat.exists == True and result.stdout != '0'    

- shell: sed -i '/^$/d'  "{{ config_file }}"; sed -i '$d'  "{{ config_file }}"; END_LINE=`cat "{{ config_file }}" | wc -l`; sed -i "$END_LINE"'s/$/,/g' "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|no-new-privileges|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout == '0'
  
- shell: MATCH_LINE=`grep -n '"no-new-privileges"' "{{ config_file }}" | sed 's|:||g' | awk '{print $1}'`; sed -i "$MATCH_LINE"'s/false/true/g' "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout == '0'
  
- shell: echo '{' >> "{{ config_file }}"; cat "{{ src_file }}" | sed 's|key|no-new-privileges|g' | sed 's|value|true|g' >> "{{ config_file }}"; echo "" >> "{{ config_file }}"; echo '}' >> "{{ config_file }}"
  notify: Reload docker
  when: st.stat.exists == False  

- debug: msg="Containers are already restricted from acquiring new privileges"
  when: st.stat.exists == True and result.stdout != '0' and result_true.stdout != '0' 
  tags:
   - scored
   - section2.18