- name: 4.1 Ensure a user for the container has been created (Scored)
  shell: for i in `docker ps --quiet --all`; do USER=`docker inspect $i | grep '"User":' | sed 's/,//g'`; echo "$i = $USER"; done
  ignore_errors: true
  register: result

- debug: msg="This configuration is set in docker-compose.yml file."

- debug: msg="Current lists of images and users:"

- debug: 
    msg: "{{ result.stdout_lines }}"
  tags:
   - scored
   - section4.1

- name: 4.2 Ensure that containers use trusted base images (Not Scored)
  shell: docker images
  ignore_errors: true
  register: result
  
- debug: msg="Current lists of images"

- debug: 
    msg: "{{ result.stdout_lines }}"
  tags:
   - not_scored
   - section4.2

- name: 4.3 Ensure unnecessary packages are not installed in the container (Not Scored)
  shell: docker ps --quiet
  ignore_errors: true  
  register: result 
  
- debug: msg="Do not install unnecessary packages in the container. List of docker containers"

- debug:
    msg: "{{ result.stdout_lines }}"
  tags:
   - not_scored
   - section4.3

- name: 4.4 Ensure images are scanned and rebuilt to include security patches (Not Scored)
  shell: docker ps --quiet
  ignore_errors: true  
  register: result
  
- debug: msg="Rebuild the images to include security patches. Current lists of images"

- debug:
    msg: "{{ result.stdout_lines }}" 
  tags:
   - not_scored
   - section4.4

- name: 4.5 Ensure Content trust for Docker is Enabled (Scored)
  debug: msg="N/A Enabling Content trust affects the Docker build process."
  tags:
    - scored
    - section4.5

#- stat:
#    path: /etc/environment
#  register: result_stat
#  
#- name: 4.5 Ensure Content trust for Docker is Enabled (Scored)
#  lineinfile:
#    path: /etc/environment
#    line: DOCKER_CONTENT_TRUST=1
#  when: result_stat.stat.exists == true
#  
#- debug: msg="N/A /etc/environment does not exists."
#  when: result_stat.stat.exists == false  
#  tags:
#   - scored
#   - section4.5
   
- name: 4.6 Ensure HEALTHCHECK instructions have been added to the container image (Scored)
  shell: for i in `docker ps --quiet --all`; do HEALTH=`docker inspect $i | grep -E -A6 'Healthcheck|Test' | grep -Ev 'Healthcheck|Test' | sed 's/"Interval"://g' | sed 's/"Timeout"://g' | sed 's/"Retries"://g' | sed 's/\]//g' | sed 's/[\"\,]//g' | sed 's/[[:space:]]//g' | sed 's/^$//g' | paste -s -d ' '`; echo "$i = [ $HEALTH ]"; done
  ignore_errors: true
  register: audit_result  
  
- debug: msg="This is configuration is set in docker-compose-swarm.yaml and docker-compose.yml"
  
- debug: msg="Current list of docker images:"

- debug: 
    msg: "{{ audit_result.stdout_lines }}"
  tags:
   - scored
   - section4.6
   
- name: 4.7 Ensure update instructions are not use alone in the Dockerfile (Not Scored)
  debug: msg="Use --no-cache flag during docker build process to avoid using cached layers"
  
- shell: docker images
  ignore_errors: yes
  register: audit_result
  
- debug: msg="Current list of docker images:"

- debug: 
    msg: "{{ audit_result.stdout_lines }}"  
  tags:
   - not_scored
   - section4.7

- name: 4.8 Ensure setuid and setgid permissions are removed in the images (Not Scored)
  debug: msg="Use DevSec Linux Baseline in Container"
  tags:
   - not_scored
   - section4.8

#- name: 4.9 Ensure COPY is used instead of ADD in Dockerfile (Not Scored)
#  debug: msg="This is configuration is set when containers are run"
#  tags:
#   - not_scored
#   - section4.9

- name: 4.10 Ensure secrets are not stored in Dockerfiles (Not Scored)
  debug: msg="Manually verify that you have not used secrets in images"
  
- shell: docker images
  ignore_errors: yes
  register: audit_result
  
- debug: msg="Current list of docker images:"

- debug: 
    msg: "{{ audit_result.stdout_lines }}"  
  tags:
   - not_scored
   - section4.10

- name: 4.11 Ensure verified packages are only Installed (Not Scored)
  debug: msg="Manually verify that you installed verified packages"
  
- shell: docker images
  ignore_errors: yes
  register: audit_result
  
- debug: msg="Current list of docker images:"

- debug: 
    msg: "{{ audit_result.stdout_lines }}"  
  tags:
   - not_scored
   - section4.11
